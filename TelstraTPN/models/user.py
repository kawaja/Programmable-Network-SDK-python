# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.

    OpenAPI spec version: 2.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class User(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'useruuid': 'str',
        'status': 'str',
        'title': 'str',
        'usercountry': 'str',
        'emailaddress': 'str',
        'jobtitle': 'str',
        'firstname': 'str',
        'middlename': 'str',
        'lastname': 'str',
        'phonenumber': 'str',
        'phoneext': 'str',
        'phonetype': 'str'
    }

    attribute_map = {
        'useruuid': 'useruuid',
        'status': 'status',
        'title': 'title',
        'usercountry': 'usercountry',
        'emailaddress': 'emailaddress',
        'jobtitle': 'jobtitle',
        'firstname': 'firstname',
        'middlename': 'middlename',
        'lastname': 'lastname',
        'phonenumber': 'phonenumber',
        'phoneext': 'phoneext',
        'phonetype': 'phonetype'
    }

    def __init__(self, useruuid=None, status=None, title=None, usercountry=None, emailaddress=None, jobtitle=None, firstname=None, middlename=None, lastname=None, phonenumber=None, phoneext=None, phonetype=None):
        """
        User - a model defined in Swagger
        """

        self._useruuid = None
        self._status = None
        self._title = None
        self._usercountry = None
        self._emailaddress = None
        self._jobtitle = None
        self._firstname = None
        self._middlename = None
        self._lastname = None
        self._phonenumber = None
        self._phoneext = None
        self._phonetype = None

        self.useruuid = useruuid
        self.status = status
        if title is not None:
          self.title = title
        if usercountry is not None:
          self.usercountry = usercountry
        if emailaddress is not None:
          self.emailaddress = emailaddress
        if jobtitle is not None:
          self.jobtitle = jobtitle
        if firstname is not None:
          self.firstname = firstname
        if middlename is not None:
          self.middlename = middlename
        if lastname is not None:
          self.lastname = lastname
        if phonenumber is not None:
          self.phonenumber = phonenumber
        if phoneext is not None:
          self.phoneext = phoneext
        if phonetype is not None:
          self.phonetype = phonetype

    @property
    def useruuid(self):
        """
        Gets the useruuid of this User.
        

        :return: The useruuid of this User.
        :rtype: str
        """
        return self._useruuid

    @useruuid.setter
    def useruuid(self, useruuid):
        """
        Sets the useruuid of this User.
        

        :param useruuid: The useruuid of this User.
        :type: str
        """
        if useruuid is None:
            raise ValueError("Invalid value for `useruuid`, must not be `None`")

        self._useruuid = useruuid

    @property
    def status(self):
        """
        Gets the status of this User.
        

        :return: The status of this User.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this User.
        

        :param status: The status of this User.
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def title(self):
        """
        Gets the title of this User.
        

        :return: The title of this User.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this User.
        

        :param title: The title of this User.
        :type: str
        """

        self._title = title

    @property
    def usercountry(self):
        """
        Gets the usercountry of this User.
        

        :return: The usercountry of this User.
        :rtype: str
        """
        return self._usercountry

    @usercountry.setter
    def usercountry(self, usercountry):
        """
        Sets the usercountry of this User.
        

        :param usercountry: The usercountry of this User.
        :type: str
        """

        self._usercountry = usercountry

    @property
    def emailaddress(self):
        """
        Gets the emailaddress of this User.
        

        :return: The emailaddress of this User.
        :rtype: str
        """
        return self._emailaddress

    @emailaddress.setter
    def emailaddress(self, emailaddress):
        """
        Sets the emailaddress of this User.
        

        :param emailaddress: The emailaddress of this User.
        :type: str
        """

        self._emailaddress = emailaddress

    @property
    def jobtitle(self):
        """
        Gets the jobtitle of this User.
        

        :return: The jobtitle of this User.
        :rtype: str
        """
        return self._jobtitle

    @jobtitle.setter
    def jobtitle(self, jobtitle):
        """
        Sets the jobtitle of this User.
        

        :param jobtitle: The jobtitle of this User.
        :type: str
        """

        self._jobtitle = jobtitle

    @property
    def firstname(self):
        """
        Gets the firstname of this User.
        

        :return: The firstname of this User.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """
        Sets the firstname of this User.
        

        :param firstname: The firstname of this User.
        :type: str
        """

        self._firstname = firstname

    @property
    def middlename(self):
        """
        Gets the middlename of this User.
        

        :return: The middlename of this User.
        :rtype: str
        """
        return self._middlename

    @middlename.setter
    def middlename(self, middlename):
        """
        Sets the middlename of this User.
        

        :param middlename: The middlename of this User.
        :type: str
        """

        self._middlename = middlename

    @property
    def lastname(self):
        """
        Gets the lastname of this User.
        

        :return: The lastname of this User.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """
        Sets the lastname of this User.
        

        :param lastname: The lastname of this User.
        :type: str
        """

        self._lastname = lastname

    @property
    def phonenumber(self):
        """
        Gets the phonenumber of this User.
        

        :return: The phonenumber of this User.
        :rtype: str
        """
        return self._phonenumber

    @phonenumber.setter
    def phonenumber(self, phonenumber):
        """
        Sets the phonenumber of this User.
        

        :param phonenumber: The phonenumber of this User.
        :type: str
        """

        self._phonenumber = phonenumber

    @property
    def phoneext(self):
        """
        Gets the phoneext of this User.
        

        :return: The phoneext of this User.
        :rtype: str
        """
        return self._phoneext

    @phoneext.setter
    def phoneext(self, phoneext):
        """
        Sets the phoneext of this User.
        

        :param phoneext: The phoneext of this User.
        :type: str
        """

        self._phoneext = phoneext

    @property
    def phonetype(self):
        """
        Gets the phonetype of this User.
        

        :return: The phonetype of this User.
        :rtype: str
        """
        return self._phonetype

    @phonetype.setter
    def phonetype(self, phonetype):
        """
        Sets the phonetype of this User.
        

        :param phonetype: The phonetype of this User.
        :type: str
        """

        self._phonetype = phonetype

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
