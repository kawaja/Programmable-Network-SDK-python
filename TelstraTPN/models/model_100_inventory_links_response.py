# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.

    OpenAPI spec version: 2.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Model100InventoryLinksResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'latency': 'int',
        'linkid': 'str',
        'contracts': 'list[Contract]',
        'tag': 'str',
        'connections': 'list[str]',
        'type': 'str',
        'link_status': 'int',
        'topology_tag_uuid': 'str',
        'billing_id': 'str'
    }

    attribute_map = {
        'description': 'description',
        'latency': 'latency',
        'linkid': 'linkid',
        'contracts': 'contracts',
        'tag': 'tag',
        'connections': 'connections',
        'type': 'type',
        'link_status': 'linkStatus',
        'topology_tag_uuid': 'topology_tag_uuid',
        'billing_id': 'billing-id'
    }

    def __init__(self, description=None, latency=None, linkid=None, contracts=None, tag=None, connections=None, type=None, link_status=None, topology_tag_uuid=None, billing_id=None):
        """
        Model100InventoryLinksResponse - a model defined in Swagger
        """

        self._description = None
        self._latency = None
        self._linkid = None
        self._contracts = None
        self._tag = None
        self._connections = None
        self._type = None
        self._link_status = None
        self._topology_tag_uuid = None
        self._billing_id = None

        if description is not None:
          self.description = description
        if latency is not None:
          self.latency = latency
        if linkid is not None:
          self.linkid = linkid
        if contracts is not None:
          self.contracts = contracts
        if tag is not None:
          self.tag = tag
        if connections is not None:
          self.connections = connections
        if type is not None:
          self.type = type
        if link_status is not None:
          self.link_status = link_status
        if topology_tag_uuid is not None:
          self.topology_tag_uuid = topology_tag_uuid
        if billing_id is not None:
          self.billing_id = billing_id

    @property
    def description(self):
        """
        Gets the description of this Model100InventoryLinksResponse.
        

        :return: The description of this Model100InventoryLinksResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Model100InventoryLinksResponse.
        

        :param description: The description of this Model100InventoryLinksResponse.
        :type: str
        """

        self._description = description

    @property
    def latency(self):
        """
        Gets the latency of this Model100InventoryLinksResponse.
        Latency: 0=Low, 1=Standard, 2=Best Effort

        :return: The latency of this Model100InventoryLinksResponse.
        :rtype: int
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """
        Sets the latency of this Model100InventoryLinksResponse.
        Latency: 0=Low, 1=Standard, 2=Best Effort

        :param latency: The latency of this Model100InventoryLinksResponse.
        :type: int
        """

        self._latency = latency

    @property
    def linkid(self):
        """
        Gets the linkid of this Model100InventoryLinksResponse.
        Identifier of a link

        :return: The linkid of this Model100InventoryLinksResponse.
        :rtype: str
        """
        return self._linkid

    @linkid.setter
    def linkid(self, linkid):
        """
        Sets the linkid of this Model100InventoryLinksResponse.
        Identifier of a link

        :param linkid: The linkid of this Model100InventoryLinksResponse.
        :type: str
        """

        self._linkid = linkid

    @property
    def contracts(self):
        """
        Gets the contracts of this Model100InventoryLinksResponse.
        

        :return: The contracts of this Model100InventoryLinksResponse.
        :rtype: list[Contract]
        """
        return self._contracts

    @contracts.setter
    def contracts(self, contracts):
        """
        Sets the contracts of this Model100InventoryLinksResponse.
        

        :param contracts: The contracts of this Model100InventoryLinksResponse.
        :type: list[Contract]
        """

        self._contracts = contracts

    @property
    def tag(self):
        """
        Gets the tag of this Model100InventoryLinksResponse.
        

        :return: The tag of this Model100InventoryLinksResponse.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this Model100InventoryLinksResponse.
        

        :param tag: The tag of this Model100InventoryLinksResponse.
        :type: str
        """

        self._tag = tag

    @property
    def connections(self):
        """
        Gets the connections of this Model100InventoryLinksResponse.
        

        :return: The connections of this Model100InventoryLinksResponse.
        :rtype: list[str]
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """
        Sets the connections of this Model100InventoryLinksResponse.
        

        :param connections: The connections of this Model100InventoryLinksResponse.
        :type: list[str]
        """

        self._connections = connections

    @property
    def type(self):
        """
        Gets the type of this Model100InventoryLinksResponse.
        

        :return: The type of this Model100InventoryLinksResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Model100InventoryLinksResponse.
        

        :param type: The type of this Model100InventoryLinksResponse.
        :type: str
        """

        self._type = type

    @property
    def link_status(self):
        """
        Gets the link_status of this Model100InventoryLinksResponse.
        

        :return: The link_status of this Model100InventoryLinksResponse.
        :rtype: int
        """
        return self._link_status

    @link_status.setter
    def link_status(self, link_status):
        """
        Sets the link_status of this Model100InventoryLinksResponse.
        

        :param link_status: The link_status of this Model100InventoryLinksResponse.
        :type: int
        """

        self._link_status = link_status

    @property
    def topology_tag_uuid(self):
        """
        Gets the topology_tag_uuid of this Model100InventoryLinksResponse.
        

        :return: The topology_tag_uuid of this Model100InventoryLinksResponse.
        :rtype: str
        """
        return self._topology_tag_uuid

    @topology_tag_uuid.setter
    def topology_tag_uuid(self, topology_tag_uuid):
        """
        Sets the topology_tag_uuid of this Model100InventoryLinksResponse.
        

        :param topology_tag_uuid: The topology_tag_uuid of this Model100InventoryLinksResponse.
        :type: str
        """

        self._topology_tag_uuid = topology_tag_uuid

    @property
    def billing_id(self):
        """
        Gets the billing_id of this Model100InventoryLinksResponse.
        

        :return: The billing_id of this Model100InventoryLinksResponse.
        :rtype: str
        """
        return self._billing_id

    @billing_id.setter
    def billing_id(self, billing_id):
        """
        Sets the billing_id of this Model100InventoryLinksResponse.
        

        :param billing_id: The billing_id of this Model100InventoryLinksResponse.
        :type: str
        """

        self._billing_id = billing_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Model100InventoryLinksResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
