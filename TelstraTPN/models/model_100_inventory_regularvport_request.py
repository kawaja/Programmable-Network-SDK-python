# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.

    OpenAPI spec version: 2.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Model100InventoryRegularvportRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vporttype': 'str',
        'endpointuuid': 'str',
        'vportvalue': 'Vportvalue'
    }

    attribute_map = {
        'vporttype': 'vporttype',
        'endpointuuid': 'endpointuuid',
        'vportvalue': 'vportvalue'
    }

    def __init__(self, vporttype=None, endpointuuid=None, vportvalue=None):
        """
        Model100InventoryRegularvportRequest - a model defined in Swagger
        """

        self._vporttype = None
        self._endpointuuid = None
        self._vportvalue = None

        if vporttype is not None:
          self.vporttype = vporttype
        if endpointuuid is not None:
          self.endpointuuid = endpointuuid
        if vportvalue is not None:
          self.vportvalue = vportvalue

    @property
    def vporttype(self):
        """
        Gets the vporttype of this Model100InventoryRegularvportRequest.
        

        :return: The vporttype of this Model100InventoryRegularvportRequest.
        :rtype: str
        """
        return self._vporttype

    @vporttype.setter
    def vporttype(self, vporttype):
        """
        Sets the vporttype of this Model100InventoryRegularvportRequest.
        

        :param vporttype: The vporttype of this Model100InventoryRegularvportRequest.
        :type: str
        """

        self._vporttype = vporttype

    @property
    def endpointuuid(self):
        """
        Gets the endpointuuid of this Model100InventoryRegularvportRequest.
        

        :return: The endpointuuid of this Model100InventoryRegularvportRequest.
        :rtype: str
        """
        return self._endpointuuid

    @endpointuuid.setter
    def endpointuuid(self, endpointuuid):
        """
        Sets the endpointuuid of this Model100InventoryRegularvportRequest.
        

        :param endpointuuid: The endpointuuid of this Model100InventoryRegularvportRequest.
        :type: str
        """

        self._endpointuuid = endpointuuid

    @property
    def vportvalue(self):
        """
        Gets the vportvalue of this Model100InventoryRegularvportRequest.

        :return: The vportvalue of this Model100InventoryRegularvportRequest.
        :rtype: Vportvalue
        """
        return self._vportvalue

    @vportvalue.setter
    def vportvalue(self, vportvalue):
        """
        Sets the vportvalue of this Model100InventoryRegularvportRequest.

        :param vportvalue: The vportvalue of this Model100InventoryRegularvportRequest.
        :type: Vportvalue
        """

        self._vportvalue = vportvalue

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Model100InventoryRegularvportRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
