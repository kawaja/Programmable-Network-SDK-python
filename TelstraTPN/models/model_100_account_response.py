# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.

    OpenAPI spec version: 2.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Model100AccountResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'phone': 'str',
        'city': 'str',
        'fax': 'str',
        'country': 'str',
        'address': 'str',
        'state': 'str',
        'website': 'str',
        'companyuuid': 'str',
        'companyname': 'str',
        'postalcode': 'str',
        'customertype': 'str',
        'status': 'str',
        'customeraccountid': 'str'
    }

    attribute_map = {
        'phone': 'phone',
        'city': 'city',
        'fax': 'fax',
        'country': 'country',
        'address': 'address',
        'state': 'state',
        'website': 'website',
        'companyuuid': 'companyuuid',
        'companyname': 'companyname',
        'postalcode': 'postalcode',
        'customertype': 'customertype',
        'status': 'status',
        'customeraccountid': 'customeraccountid'
    }

    def __init__(self, phone=None, city=None, fax=None, country=None, address=None, state=None, website=None, companyuuid=None, companyname=None, postalcode=None, customertype=None, status=None, customeraccountid=None):
        """
        Model100AccountResponse - a model defined in Swagger
        """

        self._phone = None
        self._city = None
        self._fax = None
        self._country = None
        self._address = None
        self._state = None
        self._website = None
        self._companyuuid = None
        self._companyname = None
        self._postalcode = None
        self._customertype = None
        self._status = None
        self._customeraccountid = None

        if phone is not None:
          self.phone = phone
        if city is not None:
          self.city = city
        if fax is not None:
          self.fax = fax
        if country is not None:
          self.country = country
        if address is not None:
          self.address = address
        if state is not None:
          self.state = state
        if website is not None:
          self.website = website
        if companyuuid is not None:
          self.companyuuid = companyuuid
        if companyname is not None:
          self.companyname = companyname
        if postalcode is not None:
          self.postalcode = postalcode
        if customertype is not None:
          self.customertype = customertype
        if status is not None:
          self.status = status
        if customeraccountid is not None:
          self.customeraccountid = customeraccountid

    @property
    def phone(self):
        """
        Gets the phone of this Model100AccountResponse.
        

        :return: The phone of this Model100AccountResponse.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this Model100AccountResponse.
        

        :param phone: The phone of this Model100AccountResponse.
        :type: str
        """

        self._phone = phone

    @property
    def city(self):
        """
        Gets the city of this Model100AccountResponse.
        

        :return: The city of this Model100AccountResponse.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this Model100AccountResponse.
        

        :param city: The city of this Model100AccountResponse.
        :type: str
        """

        self._city = city

    @property
    def fax(self):
        """
        Gets the fax of this Model100AccountResponse.
        

        :return: The fax of this Model100AccountResponse.
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """
        Sets the fax of this Model100AccountResponse.
        

        :param fax: The fax of this Model100AccountResponse.
        :type: str
        """

        self._fax = fax

    @property
    def country(self):
        """
        Gets the country of this Model100AccountResponse.
        

        :return: The country of this Model100AccountResponse.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this Model100AccountResponse.
        

        :param country: The country of this Model100AccountResponse.
        :type: str
        """

        self._country = country

    @property
    def address(self):
        """
        Gets the address of this Model100AccountResponse.
        

        :return: The address of this Model100AccountResponse.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this Model100AccountResponse.
        

        :param address: The address of this Model100AccountResponse.
        :type: str
        """

        self._address = address

    @property
    def state(self):
        """
        Gets the state of this Model100AccountResponse.
        

        :return: The state of this Model100AccountResponse.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Model100AccountResponse.
        

        :param state: The state of this Model100AccountResponse.
        :type: str
        """

        self._state = state

    @property
    def website(self):
        """
        Gets the website of this Model100AccountResponse.
        

        :return: The website of this Model100AccountResponse.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """
        Sets the website of this Model100AccountResponse.
        

        :param website: The website of this Model100AccountResponse.
        :type: str
        """

        self._website = website

    @property
    def companyuuid(self):
        """
        Gets the companyuuid of this Model100AccountResponse.
        

        :return: The companyuuid of this Model100AccountResponse.
        :rtype: str
        """
        return self._companyuuid

    @companyuuid.setter
    def companyuuid(self, companyuuid):
        """
        Sets the companyuuid of this Model100AccountResponse.
        

        :param companyuuid: The companyuuid of this Model100AccountResponse.
        :type: str
        """

        self._companyuuid = companyuuid

    @property
    def companyname(self):
        """
        Gets the companyname of this Model100AccountResponse.
        

        :return: The companyname of this Model100AccountResponse.
        :rtype: str
        """
        return self._companyname

    @companyname.setter
    def companyname(self, companyname):
        """
        Sets the companyname of this Model100AccountResponse.
        

        :param companyname: The companyname of this Model100AccountResponse.
        :type: str
        """

        self._companyname = companyname

    @property
    def postalcode(self):
        """
        Gets the postalcode of this Model100AccountResponse.
        

        :return: The postalcode of this Model100AccountResponse.
        :rtype: str
        """
        return self._postalcode

    @postalcode.setter
    def postalcode(self, postalcode):
        """
        Sets the postalcode of this Model100AccountResponse.
        

        :param postalcode: The postalcode of this Model100AccountResponse.
        :type: str
        """

        self._postalcode = postalcode

    @property
    def customertype(self):
        """
        Gets the customertype of this Model100AccountResponse.
        

        :return: The customertype of this Model100AccountResponse.
        :rtype: str
        """
        return self._customertype

    @customertype.setter
    def customertype(self, customertype):
        """
        Sets the customertype of this Model100AccountResponse.
        

        :param customertype: The customertype of this Model100AccountResponse.
        :type: str
        """

        self._customertype = customertype

    @property
    def status(self):
        """
        Gets the status of this Model100AccountResponse.
        

        :return: The status of this Model100AccountResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Model100AccountResponse.
        

        :param status: The status of this Model100AccountResponse.
        :type: str
        """

        self._status = status

    @property
    def customeraccountid(self):
        """
        Gets the customeraccountid of this Model100AccountResponse.
        

        :return: The customeraccountid of this Model100AccountResponse.
        :rtype: str
        """
        return self._customeraccountid

    @customeraccountid.setter
    def customeraccountid(self, customeraccountid):
        """
        Sets the customeraccountid of this Model100AccountResponse.
        

        :param customeraccountid: The customeraccountid of this Model100AccountResponse.
        :type: str
        """

        self._customeraccountid = customeraccountid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Model100AccountResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
