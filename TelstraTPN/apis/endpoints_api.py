# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.

    OpenAPI spec version: 2.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class EndpointsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def 100_inventory_endpoint_by_endpointuuid_get(self, endpointuuid, **kwargs):
        """
        Get information about the specified endpoint
        Get information about the specified endpoint
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.100_inventory_endpoint_by_endpointuuid_get(endpointuuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :return: Model100InventoryEndpointResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.100_inventory_endpoint_by_endpointuuid_get_with_http_info(endpointuuid, **kwargs)
        else:
            (data) = self.100_inventory_endpoint_by_endpointuuid_get_with_http_info(endpointuuid, **kwargs)
            return data

    def 100_inventory_endpoint_by_endpointuuid_get_with_http_info(self, endpointuuid, **kwargs):
        """
        Get information about the specified endpoint
        Get information about the specified endpoint
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.100_inventory_endpoint_by_endpointuuid_get_with_http_info(endpointuuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :return: Model100InventoryEndpointResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpointuuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method 100_inventory_endpoint_by_endpointuuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpointuuid' is set
        if ('endpointuuid' not in params) or (params['endpointuuid'] is None):
            raise ValueError("Missing the required parameter `endpointuuid` when calling `100_inventory_endpoint_by_endpointuuid_get`")


        collection_formats = {}

        path_params = {}
        if 'endpointuuid' in params:
            path_params['endpointuuid'] = params['endpointuuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/1.0.0/inventory/endpoint/{endpointuuid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Model100InventoryEndpointResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def 100_inventory_endpoints_customeruuid_by_customeruuid_get(self, customeruuid, **kwargs):
        """
        Get list of endpoints for a customer
        Get list of endpoints for a customer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.100_inventory_endpoints_customeruuid_by_customeruuid_get(customeruuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str customeruuid: Unique identifier representing a specific customer (required)
        :return: Model100InventoryEndpointsCustomeruuidResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.100_inventory_endpoints_customeruuid_by_customeruuid_get_with_http_info(customeruuid, **kwargs)
        else:
            (data) = self.100_inventory_endpoints_customeruuid_by_customeruuid_get_with_http_info(customeruuid, **kwargs)
            return data

    def 100_inventory_endpoints_customeruuid_by_customeruuid_get_with_http_info(self, customeruuid, **kwargs):
        """
        Get list of endpoints for a customer
        Get list of endpoints for a customer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.100_inventory_endpoints_customeruuid_by_customeruuid_get_with_http_info(customeruuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str customeruuid: Unique identifier representing a specific customer (required)
        :return: Model100InventoryEndpointsCustomeruuidResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customeruuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method 100_inventory_endpoints_customeruuid_by_customeruuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customeruuid' is set
        if ('customeruuid' not in params) or (params['customeruuid'] is None):
            raise ValueError("Missing the required parameter `customeruuid` when calling `100_inventory_endpoints_customeruuid_by_customeruuid_get`")


        collection_formats = {}

        path_params = {}
        if 'customeruuid' in params:
            path_params['customeruuid'] = params['customeruuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/1.0.0/inventory/endpoints/customeruuid/{customeruuid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Model100InventoryEndpointsCustomeruuidResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def 100_inventory_regularendpoint_post(self, **kwargs):
        """
        Create Physical (Port) Endpoint
        Create Physical (Port) Endpoint
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.100_inventory_regularendpoint_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Model100InventoryRegularendpointRequest body: 
        :return: Model100InventoryRegularendpointResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.100_inventory_regularendpoint_post_with_http_info(**kwargs)
        else:
            (data) = self.100_inventory_regularendpoint_post_with_http_info(**kwargs)
            return data

    def 100_inventory_regularendpoint_post_with_http_info(self, **kwargs):
        """
        Create Physical (Port) Endpoint
        Create Physical (Port) Endpoint
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.100_inventory_regularendpoint_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Model100InventoryRegularendpointRequest body: 
        :return: Model100InventoryRegularendpointResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method 100_inventory_regularendpoint_post" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/1.0.0/inventory/regularendpoint', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Model100InventoryRegularendpointResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def 100_inventory_vnfendpoint_post(self, **kwargs):
        """
        Create VNF Endpoint
        Create VNF Endpoint
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.100_inventory_vnfendpoint_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Model100InventoryVnfendpointRequest body: 
        :return: Model100InventoryVnfendpointResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.100_inventory_vnfendpoint_post_with_http_info(**kwargs)
        else:
            (data) = self.100_inventory_vnfendpoint_post_with_http_info(**kwargs)
            return data

    def 100_inventory_vnfendpoint_post_with_http_info(self, **kwargs):
        """
        Create VNF Endpoint
        Create VNF Endpoint
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.100_inventory_vnfendpoint_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Model100InventoryVnfendpointRequest body: 
        :return: Model100InventoryVnfendpointResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method 100_inventory_vnfendpoint_post" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/1.0.0/inventory/vnfendpoint', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Model100InventoryVnfendpointResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def eis100_endpoints_assign_topology_tag_by_endpointuuid_post(self, endpointuuid, **kwargs):
        """
        Assign a Topology Tag to an Endpoint
        Assign a Topology Tag to an Endpoint
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.eis100_endpoints_assign_topology_tag_by_endpointuuid_post(endpointuuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :param Eis100EndpointsAssignTopologyTagRequest body: 
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.eis100_endpoints_assign_topology_tag_by_endpointuuid_post_with_http_info(endpointuuid, **kwargs)
        else:
            (data) = self.eis100_endpoints_assign_topology_tag_by_endpointuuid_post_with_http_info(endpointuuid, **kwargs)
            return data

    def eis100_endpoints_assign_topology_tag_by_endpointuuid_post_with_http_info(self, endpointuuid, **kwargs):
        """
        Assign a Topology Tag to an Endpoint
        Assign a Topology Tag to an Endpoint
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.eis100_endpoints_assign_topology_tag_by_endpointuuid_post_with_http_info(endpointuuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :param Eis100EndpointsAssignTopologyTagRequest body: 
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpointuuid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eis100_endpoints_assign_topology_tag_by_endpointuuid_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpointuuid' is set
        if ('endpointuuid' not in params) or (params['endpointuuid'] is None):
            raise ValueError("Missing the required parameter `endpointuuid` when calling `eis100_endpoints_assign_topology_tag_by_endpointuuid_post`")


        collection_formats = {}

        path_params = {}
        if 'endpointuuid' in params:
            path_params['endpointuuid'] = params['endpointuuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/eis/1.0.0/endpoints/{endpointuuid}/assign_topology_tag', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SuccessFragment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
