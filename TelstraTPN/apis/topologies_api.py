# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.

    OpenAPI spec version: 2.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TopologiesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def ttms100_topology_tag_by_topotaguuid_delete(self, topotaguuid, **kwargs):
        """
        Delete a topology tag
        Delete a topology tag
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ttms100_topology_tag_by_topotaguuid_delete(topotaguuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.ttms100_topology_tag_by_topotaguuid_delete_with_http_info(topotaguuid, **kwargs)
        else:
            (data) = self.ttms100_topology_tag_by_topotaguuid_delete_with_http_info(topotaguuid, **kwargs)
            return data

    def ttms100_topology_tag_by_topotaguuid_delete_with_http_info(self, topotaguuid, **kwargs):
        """
        Delete a topology tag
        Delete a topology tag
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ttms100_topology_tag_by_topotaguuid_delete_with_http_info(topotaguuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topotaguuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ttms100_topology_tag_by_topotaguuid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topotaguuid' is set
        if ('topotaguuid' not in params) or (params['topotaguuid'] is None):
            raise ValueError("Missing the required parameter `topotaguuid` when calling `ttms100_topology_tag_by_topotaguuid_delete`")


        collection_formats = {}

        path_params = {}
        if 'topotaguuid' in params:
            path_params['topotaguuid'] = params['topotaguuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/ttms/1.0.0/topology_tag/{topotaguuid}/', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def ttms100_topology_tag_by_topotaguuid_get(self, topotaguuid, **kwargs):
        """
        Get information about the specified topology tag
        Get information about the specified topology tag
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ttms100_topology_tag_by_topotaguuid_get(topotaguuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: Topology
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.ttms100_topology_tag_by_topotaguuid_get_with_http_info(topotaguuid, **kwargs)
        else:
            (data) = self.ttms100_topology_tag_by_topotaguuid_get_with_http_info(topotaguuid, **kwargs)
            return data

    def ttms100_topology_tag_by_topotaguuid_get_with_http_info(self, topotaguuid, **kwargs):
        """
        Get information about the specified topology tag
        Get information about the specified topology tag
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ttms100_topology_tag_by_topotaguuid_get_with_http_info(topotaguuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: Topology
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topotaguuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ttms100_topology_tag_by_topotaguuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topotaguuid' is set
        if ('topotaguuid' not in params) or (params['topotaguuid'] is None):
            raise ValueError("Missing the required parameter `topotaguuid` when calling `ttms100_topology_tag_by_topotaguuid_get`")


        collection_formats = {}

        path_params = {}
        if 'topotaguuid' in params:
            path_params['topotaguuid'] = params['topotaguuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/ttms/1.0.0/topology_tag/{topotaguuid}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Topology',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def ttms100_topology_tag_by_topotaguuid_put(self, topotaguuid, **kwargs):
        """
        Update a topology tag's name and/or description
        Update a topology tag's name and/or description
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ttms100_topology_tag_by_topotaguuid_put(topotaguuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :param Ttms100TopologyTagRequest body: 
        :return: Topology
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.ttms100_topology_tag_by_topotaguuid_put_with_http_info(topotaguuid, **kwargs)
        else:
            (data) = self.ttms100_topology_tag_by_topotaguuid_put_with_http_info(topotaguuid, **kwargs)
            return data

    def ttms100_topology_tag_by_topotaguuid_put_with_http_info(self, topotaguuid, **kwargs):
        """
        Update a topology tag's name and/or description
        Update a topology tag's name and/or description
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ttms100_topology_tag_by_topotaguuid_put_with_http_info(topotaguuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :param Ttms100TopologyTagRequest body: 
        :return: Topology
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topotaguuid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ttms100_topology_tag_by_topotaguuid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topotaguuid' is set
        if ('topotaguuid' not in params) or (params['topotaguuid'] is None):
            raise ValueError("Missing the required parameter `topotaguuid` when calling `ttms100_topology_tag_by_topotaguuid_put`")


        collection_formats = {}

        path_params = {}
        if 'topotaguuid' in params:
            path_params['topotaguuid'] = params['topotaguuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/ttms/1.0.0/topology_tag/{topotaguuid}/', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Topology',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def ttms100_topology_tag_get(self, **kwargs):
        """
        List all topology tags
        List all topology tags
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ttms100_topology_tag_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Topology]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.ttms100_topology_tag_get_with_http_info(**kwargs)
        else:
            (data) = self.ttms100_topology_tag_get_with_http_info(**kwargs)
            return data

    def ttms100_topology_tag_get_with_http_info(self, **kwargs):
        """
        List all topology tags
        List all topology tags
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ttms100_topology_tag_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Topology]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ttms100_topology_tag_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/ttms/1.0.0/topology_tag', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Topology]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def ttms100_topology_tag_objects_by_topotaguuid_get(self, topotaguuid, **kwargs):
        """
        List objects for Topology
        List all objects (Endpoints, Links, VPorts, etc.) associated with the topology tag.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ttms100_topology_tag_objects_by_topotaguuid_get(topotaguuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: Ttms100TopologyTagObjectsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.ttms100_topology_tag_objects_by_topotaguuid_get_with_http_info(topotaguuid, **kwargs)
        else:
            (data) = self.ttms100_topology_tag_objects_by_topotaguuid_get_with_http_info(topotaguuid, **kwargs)
            return data

    def ttms100_topology_tag_objects_by_topotaguuid_get_with_http_info(self, topotaguuid, **kwargs):
        """
        List objects for Topology
        List all objects (Endpoints, Links, VPorts, etc.) associated with the topology tag.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ttms100_topology_tag_objects_by_topotaguuid_get_with_http_info(topotaguuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: Ttms100TopologyTagObjectsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topotaguuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ttms100_topology_tag_objects_by_topotaguuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topotaguuid' is set
        if ('topotaguuid' not in params) or (params['topotaguuid'] is None):
            raise ValueError("Missing the required parameter `topotaguuid` when calling `ttms100_topology_tag_objects_by_topotaguuid_get`")


        collection_formats = {}

        path_params = {}
        if 'topotaguuid' in params:
            path_params['topotaguuid'] = params['topotaguuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/ttms/1.0.0/topology_tag/{topotaguuid}/objects/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Ttms100TopologyTagObjectsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def ttms100_topology_tag_post(self, **kwargs):
        """
        Create a named topology tag
        Create a named topology tag
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ttms100_topology_tag_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Ttms100TopologyTagRequest body: 
        :return: Topology
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.ttms100_topology_tag_post_with_http_info(**kwargs)
        else:
            (data) = self.ttms100_topology_tag_post_with_http_info(**kwargs)
            return data

    def ttms100_topology_tag_post_with_http_info(self, **kwargs):
        """
        Create a named topology tag
        Create a named topology tag
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ttms100_topology_tag_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Ttms100TopologyTagRequest body: 
        :return: Topology
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ttms100_topology_tag_post" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/ttms/1.0.0/topology_tag', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Topology',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
