# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.

    OpenAPI spec version: 2.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ContractsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def inventory_links_contract_by_linkid_and_contractid_get(self, linkid, contractid, **kwargs):
        """
        Get active Contract by ContractID
        Get active Contract by ContractID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.inventory_links_contract_by_linkid_and_contractid_get(linkid, contractid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str linkid: Unique identifier representing a specific link (required)
        :param str contractid: Unique identifier representing a specific contract (required)
        :return: Model100InventoryLinksContractResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.inventory_links_contract_by_linkid_and_contractid_get_with_http_info(linkid, contractid, **kwargs)
        else:
            (data) = self.inventory_links_contract_by_linkid_and_contractid_get_with_http_info(linkid, contractid, **kwargs)
            return data

    def inventory_links_contract_by_linkid_and_contractid_get_with_http_info(self, linkid, contractid, **kwargs):
        """
        Get active Contract by ContractID
        Get active Contract by ContractID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.inventory_links_contract_by_linkid_and_contractid_get_with_http_info(linkid, contractid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str linkid: Unique identifier representing a specific link (required)
        :param str contractid: Unique identifier representing a specific contract (required)
        :return: Model100InventoryLinksContractResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['linkid', 'contractid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventory_links_contract_by_linkid_and_contractid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'linkid' is set
        if ('linkid' not in params) or (params['linkid'] is None):
            raise ValueError("Missing the required parameter `linkid` when calling `inventory_links_contract_by_linkid_and_contractid_get`")
        # verify the required parameter 'contractid' is set
        if ('contractid' not in params) or (params['contractid'] is None):
            raise ValueError("Missing the required parameter `contractid` when calling `inventory_links_contract_by_linkid_and_contractid_get`")


        collection_formats = {}

        path_params = {}
        if 'linkid' in params:
            path_params['linkid'] = params['linkid']
        if 'contractid' in params:
            path_params['contractid'] = params['contractid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/1.0.0/inventory/links/{linkid}/contract/{contractid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Model100InventoryLinksContractResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def inventory_links_contract_by_linkid_and_contractid_put(self, linkid, contractid, **kwargs):
        """
        Update active Contract by ContractID
        Update active Contract by ContractID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.inventory_links_contract_by_linkid_and_contractid_put(linkid, contractid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str linkid: Unique identifier representing a specific link (required)
        :param str contractid: Unique identifier representing a specific contract (required)
        :param Model100InventoryLinksContractRequest body: 
        :return: Model100InventoryLinksContractResponse33
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.inventory_links_contract_by_linkid_and_contractid_put_with_http_info(linkid, contractid, **kwargs)
        else:
            (data) = self.inventory_links_contract_by_linkid_and_contractid_put_with_http_info(linkid, contractid, **kwargs)
            return data

    def inventory_links_contract_by_linkid_and_contractid_put_with_http_info(self, linkid, contractid, **kwargs):
        """
        Update active Contract by ContractID
        Update active Contract by ContractID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.inventory_links_contract_by_linkid_and_contractid_put_with_http_info(linkid, contractid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str linkid: Unique identifier representing a specific link (required)
        :param str contractid: Unique identifier representing a specific contract (required)
        :param Model100InventoryLinksContractRequest body: 
        :return: Model100InventoryLinksContractResponse33
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['linkid', 'contractid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventory_links_contract_by_linkid_and_contractid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'linkid' is set
        if ('linkid' not in params) or (params['linkid'] is None):
            raise ValueError("Missing the required parameter `linkid` when calling `inventory_links_contract_by_linkid_and_contractid_put`")
        # verify the required parameter 'contractid' is set
        if ('contractid' not in params) or (params['contractid'] is None):
            raise ValueError("Missing the required parameter `contractid` when calling `inventory_links_contract_by_linkid_and_contractid_put`")


        collection_formats = {}

        path_params = {}
        if 'linkid' in params:
            path_params['linkid'] = params['linkid']
        if 'contractid' in params:
            path_params['contractid'] = params['contractid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/1.0.0/inventory/links/{linkid}/contract/{contractid}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Model100InventoryLinksContractResponse33',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def inventory_links_contract_by_linkid_post(self, linkid, **kwargs):
        """
        Create new Contract on specified link
        Create new Contract on specified link
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.inventory_links_contract_by_linkid_post(linkid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str linkid: Unique identifier representing a specific link (required)
        :param Model100InventoryLinksContractRequest37 body: 
        :return: Model100InventoryLinksContractResponse38
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.inventory_links_contract_by_linkid_post_with_http_info(linkid, **kwargs)
        else:
            (data) = self.inventory_links_contract_by_linkid_post_with_http_info(linkid, **kwargs)
            return data

    def inventory_links_contract_by_linkid_post_with_http_info(self, linkid, **kwargs):
        """
        Create new Contract on specified link
        Create new Contract on specified link
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.inventory_links_contract_by_linkid_post_with_http_info(linkid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str linkid: Unique identifier representing a specific link (required)
        :param Model100InventoryLinksContractRequest37 body: 
        :return: Model100InventoryLinksContractResponse38
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['linkid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventory_links_contract_by_linkid_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'linkid' is set
        if ('linkid' not in params) or (params['linkid'] is None):
            raise ValueError("Missing the required parameter `linkid` when calling `inventory_links_contract_by_linkid_post`")


        collection_formats = {}

        path_params = {}
        if 'linkid' in params:
            path_params['linkid'] = params['linkid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/1.0.0/inventory/links/{linkid}/contract', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Model100InventoryLinksContractResponse38',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
